{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/card/card.component.ts","webpack:///src/app/components/card/card.component.html","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/enums/constants.enum.ts","webpack:///src/app/services/data/data.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppComponent","dataServ","mainInformationData","getList","getMainInformation","subscribe","ret","manipulateData","data","totalConfirmed","totalDeaths","totalRecovered","lastUpdated","lastUpdate","push","description","smallDescription","title","type","selector","templateUrl","styleUrls","AppModule","provide","useValue","declarations","providers","bootstrap","CardComponent","HeaderComponent","Constants","DataService","httpClient","bingApiUrl","BING_API_URL","covid19ApiUrl","COVID19_API_URL","get","providedIn","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DataService } from './services/data/data.service';\r\nimport { ICard } from './interfaces/ICard';\r\nimport { parseJSON } from 'date-fns'\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements OnInit {\r\n  public mainInformationData: ICard[] = [];\r\n  public lastUpdate: Date\r\n  constructor(private dataServ: DataService) {}\r\n\r\n  ngOnInit() {\r\n    this.getList();\r\n  }\r\n\r\n  getList() {\r\n    this.dataServ.getMainInformation().subscribe((ret) => {\r\n      // console.log({ ret });\r\n      this.manipulateData(ret);\r\n    });\r\n  }\r\n\r\n  private manipulateData(data) {\r\n    this.mainInformationData = [];\r\n\r\n    const { totalConfirmed, totalDeaths, totalRecovered, lastUpdated } = data;\r\n\r\n    this.lastUpdate = parseJSON(lastUpdated)\r\n\r\n    this.mainInformationData.push({\r\n      description: 'Total de Casos',\r\n      smallDescription: 'Total',\r\n      title: totalConfirmed,\r\n      type: 'warning',\r\n    });\r\n\r\n    this.mainInformationData.push({\r\n      description: 'Total de Casos Ativos',\r\n      smallDescription: 'Ativos',\r\n      title: totalConfirmed - (totalRecovered + totalDeaths),\r\n      type: 'info',\r\n    });\r\n\r\n    this.mainInformationData.push({\r\n      description: 'Total de Recuperações',\r\n      smallDescription: 'Recuperações',\r\n      title: totalRecovered,\r\n      type: 'success',\r\n    });\r\n\r\n    this.mainInformationData.push({\r\n      description: 'Total de Mortes',\r\n      smallDescription: 'Mortes',\r\n      title: totalDeaths,\r\n      type: 'danger',\r\n    });\r\n  }\r\n}\r\n","<div class=\"wrapper\">\r\n  <app-header\r\n    titleInfo=\"COVID19\"\r\n    description=\"Um painel para acompanhar os dados em tempo real\"\r\n  ></app-header>\r\n  <div class=\"container\">\r\n    <div class=\"row\">\r\n      <div class=\"col-6 col-md-3\" *ngFor=\"let mainInfo of mainInformationData\">\r\n        <app-card [content]=\"mainInfo\"></app-card>\r\n      </div>\r\n    </div>\r\n    <p class=\"last-update\" *ngIf=\"lastUpdate\">\r\n      Última atualização em:\r\n      <time\r\n        >{{ lastUpdate | date: \"dd/MM/yyyy\" }} às\r\n        {{ lastUpdate | date: \"HH:mm\" }}</time\r\n      >\r\n    </p>\r\n  </div>\r\n</div>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { registerLocaleData } from '@angular/common';\r\nimport pt from '@angular/common/locales/pt';\r\nregisterLocaleData(pt)\r\n\r\nimport { LOCALE_ID } from '@angular/core';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { CardComponent } from './components/card/card.component';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n// registerLocaleData(br, 'pt-BR');\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, HeaderComponent, CardComponent],\r\n  imports: [BrowserModule, AppRoutingModule, HttpClientModule],\r\n  providers: [{\r\n    provide: LOCALE_ID,\r\n    useValue: \"pt-BR\"\r\n  }],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { ICard } from 'src/app/interfaces/ICard';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss'],\r\n})\r\nexport class CardComponent implements OnInit {\r\n  @Input() content: ICard;\r\n\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {}\r\n}\r\n","<aside [class]=\"'type-' + content.type\">\r\n  <h2>\r\n    <span class=\"d-sm-block d-md-none d-lg-block d-none\">{{ content.description }}</span>\r\n    <span class=\"d-sm-none d-md-block d-lg-none\">{{ content.smallDescription }}</span>\r\n  </h2>\r\n  <h1>{{ content.title | number }}</h1>\r\n</aside>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @Input() titleInfo: string\r\n  @Input() description: string\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<header>\r\n  <h1>\r\n    <img\r\n      src=\"assets/images/coronavirus.svg\"\r\n      alt=\"{{ titleInfo }}\"\r\n      title=\"{{ titleInfo }}\"\r\n      class=\"img-fluid\"\r\n    />\r\n  </h1>\r\n  <h2>{{ description }}</h2>\r\n</header>\r\n","export enum Constants {\r\n    BING_API_URL = 'https://bing.com/covid/data',\r\n    COVID19_API_URL = 'https://api.covid19api.com/'\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Constants } from '../../enums/constants.enum';\r\n\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\n\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class DataService {\r\n  private bingApiUrl: string;\r\n  private covid19ApiUrl: string;\r\n  \r\n  constructor(private httpClient: HttpClient) {\r\n    \r\n    this.bingApiUrl = Constants.BING_API_URL;\r\n    this.covid19ApiUrl = Constants.COVID19_API_URL;\r\n\r\n    // if(!environment.production){\r\n      this.bingApiUrl = 'https://cors-anywhere.herokuapp.com/' + this.bingApiUrl;\r\n      this.covid19ApiUrl = 'https://cors-anywhere.herokuapp.com/' + this.covid19ApiUrl;\r\n    // }\r\n  }\r\n\r\n  public getMainInformation(): Observable<any>{\r\n    const ret = this.httpClient.get(this.bingApiUrl)\r\n    return ret;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}